test <- clf <- read.csv("https://raw.githubusercontent.com/d-correalr/MAE/main/Test%20bank.csv")
list.files()
train <- read.csv("https://raw.githubusercontent.com/d-correalr/MAE/main/Train%20bank.csv")
test <- read.csv("https://raw.githubusercontent.com/d-correalr/MAE/main/Test%20bank.csv")
# Preparación
train$Subscription <- as.factor(train$Subscription)
train$ID <- train$X
test$ID <- test$X
train$X <- NULL
test$X <- NULL
# ========================================
# Modelo 1: Regresión logística básica
# ========================================
modelo1 <- glm(Subscription ~ ., data = train, family = "binomial")
vars1 <- all.vars(formula(modelo1)); vars1 <- setdiff(vars1, "Subscription")
test1 <- test[, vars1, drop = FALSE]
pred1 <- predict(modelo1, newdata = test1, type = "response")
envio1 <- data.frame(Id = test$Id, Predicted = round(pred1, 0))
# ========================================
modelo2 <- step(glm(Subscription ~ ., data = train, family = "binomial"), direction = "both", trace = FALSE)
vars2 <- all.vars(formula(modelo2)); vars2 <- setdiff(vars2, "Subscription")
test2 <- test[, vars2, drop = FALSE]
pred2 <- predict(modelo2, newdata = test2, type = "response")
envio2 <- data.frame(Id = test$Id, Predicted = round(pred2, 0))
str(test2)
for (v in names(test)) {
if (is.factor(train[[v]])) {
test[[v]] <- factor(test[[v]], levels = levels(train[[v]]))
}
}
##########################################
# Modelo 1: Regresión logística básica
##########################################
# Reajustar solo si no lo hiciste
modelo2 <- step(glm(Subscription ~ ., data = train, family = "binomial"), direction = "both", trace = FALSE)
# Predecir
vars2 <- all.vars(formula(modelo2)); vars2 <- setdiff(vars2, "Subscription")
test2 <- test[, vars2, drop = FALSE]
# Alinear niveles de factores
for (v in names(test2)) {
if (is.factor(train[[v]])) {
test2[[v]] <- factor(test2[[v]], levels = levels(train[[v]]))
}
}
# Reajustar solo si no lo hiciste
modelo2 <- step(glm(Subscription ~ ., data = train, family = "binomial"), direction = "both", trace = FALSE)
# Predecir de nuevo
pred2 <- predict(modelo2, newdata = test2, type = "response")
length(pred2)  # ¿13563?
envio2 <- data.frame(Id = test$Id, Predicted = round(pred2, 0))
# Predecir de nuevo
pred2 <- predict(modelo2, newdata = test2, type = "response")
length(pred2)  # ¿13563?
envio2 <- data.frame(Id = test$Id, Predicted = round(pred2, 0))
length(pred2)
# Modelo 1: Regresión logística con todas las variables
modelo1 <- glm(Subscription ~ ., data = train, family = "binomial")
pred1 <- predict(modelo1, newdata = test, type = "response")
envio1 <- data.frame(Id = test$Id, Predicted = round(pred1, 0))
train <- read.csv("https://raw.githubusercontent.com/d-correalr/MAE/main/Train%20bank.csv")
test <- read.csv("https://raw.githubusercontent.com/d-correalr/MAE/main/Test%20bank.csv")
target <- "Subscription"
# Preparación
train$Subscription <- as.factor(train$Subscription)
train$ID <- train$X
test$ID <- test$X
train$X <- NULL
test$X <- NULL
# Modelo 1: Regresión logística con todas las variables
modelo1 <- glm(Subscription ~ ., data = train, family = "binomial")
pred1 <- predict(modelo1, newdata = test, type = "response")
envio1 <- data.frame(Id = test$Id, Predicted = round(pred1, 0))
# Modelo 1: Regresión logística con todas las variables
modelo1 <- glm(Subscription ~ ., data = train, family = "binomial")
pred1 <- predict(modelo1, newdata = test, type = "response")
envio1 <- data.frame(Id = test$ID, Predicted = round(pred1, 0))
write.table(envio1, file = "submission_model1_logistic.csv", sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
####################
# Modelo 2: GLM con solo variables numéricas
modelo2 <- glm(Subscription ~ Age + Balance..euros. + Last.Contact.Day +
Last.Contact.Duration + Campaign + Pdays + Previous,
data = train, family = "binomial")
pred2 <- predict(modelo2, newdata = test, type = "response")
envio2 <- data.frame(Id = test$ID, Predicted = round(pred2, 0))
write.table(envio2, file = "submission_model2_numeric.csv", sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
# Modelo 3: GLM con solo variables categóricas
modelo3 <- glm(Subscription ~ Job + Marital.Status + Education + Credit +
Housing.Loan + Personal.Loan + Contact + Last.Contact.Month + Poutcome,
data = train, family = "binomial")
pred3 <- predict(modelo3, newdata = test, type = "response")
envio3 <- data.frame(Id = test$ID, Predicted = round(pred3, 0))
write.table(envio3, file = "submission_model3_categoricas.csv", sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE
# Modelo 4: GLM con 3 variables más importantes (ejemplo)
modelo4 <- glm(Subscription ~ Contact + Poutcome + Last.Contact.Duration,
# Modelo 4: GLM con 3 variables más importantes (ejemplo)
modelo4 <- glm(Subscription ~ Contact + Poutcome + Last.Contact.Duration,
data = train, family = "binomial")
pred4 <- predict(modelo4, newdata = test, type = "response")
envio4 <- data.frame(Id = test$ID, Predicted = round(pred4, 0))
write.table(envio4, file = "submission_model4_top3.csv", sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
# Modelo 5: GLM con variables manualmente elegidas
modelo5 <- glm(Subscription ~ Age + Education + Contact + Campaign + Poutcome,
data = train, family = "binomial")
pred5 <- predict(modelo5, newdata = test, type = "response")
envio5 <- data.frame(Id = test$Id, Predicted = round(pred5, 0))
envio5 <- data.frame(Id = test$ID, Predicted = round(pred5, 0))
write.table(envio5, file = "submission_model5_mixto.csv", sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
library(MASS)
modelo6 <- lda(Subscription ~ ., data = train)
pred6 <- predict(modelo6, newdata = test)$posterior[,2]
envio6 <- data.frame(Id = test$ID, Predicted = round(pred6, 0))
write.table(envio6, file = "submission_model6_lda.csv", sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
# Modelo 7: LDA con variables seleccionadas
modelo7 <- lda(Subscription ~ Age + Contact + Last.Contact.Duration + Poutcome,
data = train)
pred7 <- predict(modelo7, newdata = test)$posterior[,2]
envio7 <- data.frame(Id = test$ID, Predicted = round(pred7, 0))
write.table(envio7, file = "submission_model7_lda_selec.csv", sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
# Modelo 8: Regresión logística con Contact + Pdays + Job
modelo8 <- glm(Subscription ~ Contact + Pdays + Job, data = train, family = "binomial")
pred8 <- predict(modelo8, newdata = test, type = "response")
envio8 <- data.frame(Id = test$ID, Predicted = round(pred8, 0))
write.table(envio8, file = "submission_model8_simple.csv", sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
# Modelo 9: GLM con variables de marketing (Campaign, Contact, Previous, Poutcome)
modelo9 <- glm(Subscription ~ Campaign + Contact + Previous + Poutcome,
data = train, family = "binomial")
pred9 <- predict(modelo9, newdata = test, type = "response")
envio9 <- data.frame(Id = test$ID, Predicted = round(pred9, 0))
write.table(envio9, file = "submission_model9_marketing.csv", sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
# Modelo 10: LDA con solo Contact y Poutcome
modelo10 <- lda(Subscription ~ Contact + Poutcome, data = train)
pred10 <- predict(modelo10, newdata = test)$posterior[,2]
envio10 <- data.frame(Id = test$ID, Predicted = round(pred10, 0))
write.table(envio10, file = "submission_model10_lda_contact.csv", sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
modelo7b <- lda(Subscription ~ Age + Contact + Last.Contact.Duration + Poutcome + Education + Campaign + Previous, data = train)
pred7b <- predict(modelo7b, newdata = test)$posterior[,2]
envio7b <- data.frame(Id = test$ID, Predicted = round(pred7b, 0))
write.table(envio7b, file = "submission_model7b_lda_plus_vars.csv", sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
#7c
train$LogDuration <- log1p(train$Last.Contact.Duration)
test$LogDuration <- log1p(test$Last.Contact.Duration)
modelo7c <- lda(Subscription ~ Age + Contact + LogDuration + Poutcome, data = train)
pred7c <- predict(modelo7c, newdata = test)$posterior[,2]
envio7c <- data.frame(Id = test$Id, Predicted = round(pred7c, 0))
train$LogDuration <- log1p(train$Last.Contact.Duration)
test$LogDuration <- log1p(test$Last.Contact.Duration)
modelo7c <- lda(Subscription ~ Age + Contact + LogDuration + Poutcome, data = train)
pred7c <- predict(modelo7c, newdata = test)$posterior[,2]
envio7c <- data.frame(Id = test$ID, Predicted = round(pred7c, 0))
write.table(envio7c, file = "submission_model7c_lda_log.csv", sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
# Verificar distribución
table(train$Job)
# Reemplazar trabajos con baja frecuencia
rare_jobs <- names(which(table(train$Job) < 300))
train$JobClean <- ifelse(train$Job %in% rare_jobs, "other", train$Job)
test$JobClean <- ifelse(test$Job %in% rare_jobs, "other", test$Job)
train$JobClean <- as.factor(train$JobClean)
test$JobClean <- as.factor(test$JobClean)
modelo7d <- lda(Subscription ~ Age + Contact + Last.Contact.Duration + Poutcome + JobClean, data = train)
pred7d <- predict(modelo7d, newdata = test)$posterior[,2]
envio7d <- data.frame(Id = test$Id, Predicted = round(pred7d, 0))
#7d
# Verificar distribución
table(train$Job)
# Reemplazar trabajos con baja frecuencia
rare_jobs <- names(which(table(train$Job) < 300))
train$JobClean <- ifelse(train$Job %in% rare_jobs, "other", train$Job)
test$JobClean <- ifelse(test$Job %in% rare_jobs, "other", test$Job)
train$JobClean <- as.factor(train$JobClean)
test$JobClean <- as.factor(test$JobClean)
modelo7d <- lda(Subscription ~ Age + Contact + Last.Contact.Duration + Poutcome + JobClean, data = train)
pred7d <- predict(modelo7d, newdata = test)$posterior[,2]
envio7d <- data.frame(Id = test$ID, Predicted = round(pred7d, 0))
write.table(envio7d, file = "submission_model7d_lda_jobclean.csv", sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
#7e
library(MASS)
common_vars <- c("Age", "Contact", "Last.Contact.Duration", "Poutcome", "Education", "Campaign", "Previous")
formula_step <- as.formula(paste("Subscription ~", paste(common_vars, collapse = "+")))
modelo7e <- step(glm(formula_step, data = train, family = "binomial"), trace = FALSE)
pred7e <- predict(modelo7e, newdata = test, type = "response")
envio7e <- data.frame(Id = test$ID, Predicted = round(pred7e, 0))
write.table(envio7e, file = "submission_model7e_log_step.csv", sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
library(dplyr)
# Aseguramos factor para target
train$Subscription <- as.factor(train$Subscription)
cat("\n========================\nNUMÉRICAS\n========================\n")
# 1. Estadísticas de variables numéricas por clase
numericas <- c("Age", "Balance..euros.", "Last.Contact.Day", "Last.Contact.Duration", "Campaign", "Pdays", "Previous")
for (var in numericas) {
cat("\n---", var, "---\n")
print(
train %>%
group_by(Subscription) %>%
summarise(
Mean = mean(.data[[var]], na.rm = TRUE),
Median = median(.data[[var]], na.rm = TRUE),
SD = sd(.data[[var]], na.rm = TRUE),
Q1 = quantile(.data[[var]], 0.25, na.rm = TRUE),
Q3 = quantile(.data[[var]], 0.75, na.rm = TRUE),
.groups = "drop"
)
)
}
cat("\n========================\nCATEGÓRICAS\n========================\n")
# 2. Proporción de clase 1 por nivel de variables categóricas
categoricas <- c("Job", "Marital.Status", "Education", "Credit", "Housing.Loan", "Personal.Loan", "Contact", "Last.Contact.Month", "Poutcome")
for (var in categoricas) {
cat("\n---", var, "---\n")
print(
train %>%
group_by(.data[[var]]) %>%
summarise(
n = n(),
suscripciones = sum(Subscription == 1),
total = n(),
proporción = round(mean(Subscription == 1), 3),
.groups = "drop"
) %>%
arrange(desc(proporción))
)
}
library(MASS)
# Transformaciones
train$LogDuration <- log1p(train$Last.Contact.Duration)
test$LogDuration <- log1p(test$Last.Contact.Duration)
train$LogBalance <- log1p(train$Balance..euros. + abs(min(train$Balance..euros.)) + 1)
test$LogBalance <- log1p(test$Balance..euros. + abs(min(train$Balance..euros.)) + 1)
train$LowCampaign <- ifelse(train$Campaign <= 2, 1, 0)
test$LowCampaign <- ifelse(test$Campaign <= 2, 1, 0)
# Dummies de variables categóricas importantes
train$SuccessContact <- ifelse(train$Poutcome == "success", 1, 0)
test$SuccessContact <- ifelse(test$Poutcome == "success", 1, 0)
train$Cellular <- ifelse(train$Contact == "cellular", 1, 0)
test$Cellular <- ifelse(test$Contact == "cellular", 1, 0)
train$Month_HighConv <- ifelse(train$Last.Contact.Month %in% c("mar", "sep", "dec"), 1, 0)
test$Month_HighConv <- ifelse(test$Last.Contact.Month %in% c("mar", "sep", "dec"), 1, 0)
train$IsStudent <- ifelse(train$Job == "student", 1, 0)
test$IsStudent <- ifelse(test$Job == "student", 1, 0)
# Modelo LDA refinado
modelo7c <- lda(Subscription ~ LogDuration + LogBalance + LowCampaign + SuccessContact +
Cellular + Month_HighConv + IsStudent, data = train)
# Predicción
pred7c <- predict(modelo7c, newdata = test)$posterior[,2]
envio7c <- data.frame(Id = test$ID, Predicted = round(pred7c, 0))
# Exportar
write.table(envio7c, file = "submission_model7c_lda_refinado.csv", sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
library(MASS)
library(pROC)
library(caret)
install.packages("recipes")
library(MASS)
library(pROC)
library(caret)
library(caret)
# -------- Modelo 7b: original extendido --------
modelo7b <- lda(Subscription ~ Age + Contact + Last.Contact.Duration + Poutcome + Education + Campaign + Previous,
data = train)
prob7b <- predict(modelo7b)$posterior[,2]
pred7b <- ifelse(prob7b > 0.5, 1, 0)
# -------- Modelo 7c: mejorado con transformación y dummies --------
modelo7c <- lda(Subscription ~ LogDuration + LogBalance + LowCampaign + SuccessContact +
Cellular + Month_HighConv + IsStudent,
data = train)
prob7c <- predict(modelo7c)$posterior[,2]
pred7c <- ifelse(prob7c > 0.5, 1, 0)
# -------- Comparación --------
comparar_modelos <- function(y_true, prob, pred, nombre) {
auc <- roc(y_true, prob)$auc
cm <- confusionMatrix(as.factor(pred), y_true, positive = "1")
tibble(
Modelo = nombre,
AUC = round(as.numeric(auc), 4),
Accuracy = round(cm$overall["Accuracy"], 4),
F1 = round(cm$byClass["F1"], 4),
Sensibilidad = round(cm$byClass["Sensitivity"], 4),
Especificidad = round(cm$byClass["Specificity"], 4)
)
}
y_true <- train$Subscription
res_7b <- comparar_modelos(y_true, prob7b, pred7b, "Modelo 7b")
install.packages("recipes")
library(recipes)
library(caret)
library(recipes)
library(MASS)
library(pROC)
# Modelo 7b
modelo7b <- lda(Subscription ~ Age + Contact + Last.Contact.Duration + Poutcome + Education + Campaign + Previous,
data = train)
prob7b <- predict(modelo7b)$posterior[,2]
pred7b <- ifelse(prob7b > 0.5, 1, 0)
# Modelo 7c
modelo7c <- lda(Subscription ~ LogDuration + LogBalance + LowCampaign + SuccessContact +
Cellular + Month_HighConv + IsStudent,
data = train)
prob7c <- predict(modelo7c)$posterior[,2]
pred7c <- ifelse(prob7c > 0.5, 1, 0)
# Función de evaluación sin caret
evaluar <- function(y_true, prob, pred, nombre) {
auc <- roc(y_true, prob)$auc
TP <- sum(y_true == 1 & pred == 1)
TN <- sum(y_true == 0 & pred == 0)
FP <- sum(y_true == 0 & pred == 1)
FN <- sum(y_true == 1 & pred == 0)
accuracy <- (TP + TN) / length(y_true)
precision <- ifelse((TP + FP) == 0, 0, TP / (TP + FP))
recall <- ifelse((TP + FN) == 0, 0, TP / (TP + FN))
f1 <- ifelse((precision + recall) == 0, 0, 2 * precision * recall / (precision + recall))
specificity <- ifelse((TN + FP) == 0, 0, TN / (TN + FP))
data.frame(Modelo = nombre,
AUC = round(auc, 4),
Accuracy = round(accuracy, 4),
F1 = round(f1, 4),
Sensibilidad = round(recall, 4),
Especificidad = round(specificity, 4))
}
y_true <- as.numeric(as.character(train$Subscription))
res7b <- evaluar(y_true, prob7b, pred7b, "Modelo 7b")
res7c <- evaluar(y_true, prob7c, pred7c, "Modelo 7c Mejorado")
resultados <- rbind(res7b, res7c)
print(resultados)
library(MASS)
# ========================
# Variables transformadas
# ========================
train$LogDuration <- log1p(train$Last.Contact.Duration)
test$LogDuration <- log1p(test$Last.Contact.Duration)
# Dummy: ¿hubo éxito en contacto anterior?
train$SuccessContact <- ifelse(train$Poutcome == "success", 1, 0)
test$SuccessContact <- ifelse(test$Poutcome == "success", 1, 0)
# Dummy: ¿contactado por celular?
train$Cellular <- ifelse(train$Contact == "cellular", 1, 0)
test$Cellular <- ifelse(test$Contact == "cellular", 1, 0)
# ========================
# Modelo 7d
# ========================
modelo7d <- lda(Subscription ~ Age + Contact + LogDuration + Poutcome + Education +
Campaign + Previous + SuccessContact + Cellular,
data = train)
# ========================
# Predicción
# ========================
prob7d <- predict(modelo7d, newdata = test)$posterior[,2]
envio7d <- data.frame(Id = test$Id, Predicted = round(prob7d, 0))
# ========================
# Variables transformadas
# ========================
train$LogDuration <- log1p(train$Last.Contact.Duration)
test$LogDuration <- log1p(test$Last.Contact.Duration)
# Dummy: ¿hubo éxito en contacto anterior?
train$SuccessContact <- ifelse(train$Poutcome == "success", 1, 0)
test$SuccessContact <- ifelse(test$Poutcome == "success", 1, 0)
# Dummy: ¿contactado por celular?
train$Cellular <- ifelse(train$Contact == "cellular", 1, 0)
test$Cellular <- ifelse(test$Contact == "cellular", 1, 0)
# ========================
# Modelo 7d
# ========================
modelo7d <- lda(Subscription ~ Age + Contact + LogDuration + Poutcome + Education +
Campaign + Previous + SuccessContact + Cellular,
data = train)
# ========================
# Predicción
# ========================
prob7d <- predict(modelo7d, newdata = test)$posterior[,2]
envio7d <- data.frame(Id = test$ID, Predicted = round(prob7d, 0))
write.table(envio7d, file = "submission_model7d_lda_combinado.csv", sep = ",", row.names = FALSE, col.names = TRUE, quote = FALSE)
# En entrenamiento
prob7d_train <- predict(modelo7d, newdata = train)$posterior[,2]
pred7d_train <- ifelse(prob7d_train > 0.5, 1, 0)
res7d <- evaluar(y_true, prob7d_train, pred7d_train, "Modelo 7d Combinado")
# Comparar con anteriores
resultados <- rbind(res7b, res7c, res7d)
print(resultados)
evaluar_umbral <- function(prob, y_true, threshold) {
pred <- ifelse(prob > threshold, 1, 0)
TP <- sum(y_true == 1 & pred == 1)
TN <- sum(y_true == 0 & pred == 0)
FP <- sum(y_true == 0 & pred == 1)
FN <- sum(y_true == 1 & pred == 0)
accuracy <- (TP + TN) / length(y_true)
precision <- ifelse((TP + FP) == 0, 0, TP / (TP + FP))
recall <- ifelse((TP + FN) == 0, 0, TP / (TP + FN))
f1 <- ifelse((precision + recall) == 0, 0, 2 * precision * recall / (precision + recall))
specificity <- ifelse((TN + FP) == 0, 0, TN / (TN + FP))
auc <- roc(y_true, prob)$auc
data.frame(Umbral = threshold,
AUC = round(as.numeric(auc), 4),
Accuracy = round(accuracy, 4),
F1 = round(f1, 4),
Sensibilidad = round(recall, 4),
Especificidad = round(specificity, 4))
}
# Evaluar múltiples umbrales
umbrales <- seq(0.5, 0.3, by = -0.05)
resultados_umbral <- do.call(rbind, lapply(umbrales, function(u) evaluar_umbral(prob7b, y_true, u)))
print(resultados_umbral)
# Predicción en test
prob_test_7b <- predict(modelo7b, newdata = test)$posterior[,2]
pred_test_7b <- ifelse(prob_test_7b > 0.30, 1, 0)
# Generar archivo de envío
envio_7b_umbral <- data.frame(Id = test$Id, Predicted = pred_test_7b)
###ajustamos umbrales
# Predicción en test
prob_test_7b <- predict(modelo7b, newdata = test)$posterior[,2]
pred_test_7b <- ifelse(prob_test_7b > 0.30, 1, 0)
# Generar archivo de envío
envio_7b_umbral <- data.frame(Id = test$ID, Predicted = pred_test_7b)
write.table(envio_7b_umbral, file = "submission_model7b_umbral.csv", sep = ",",
row.names = FALSE, col.names = TRUE, quote = FALSE)
set.seed(123)
library(MASS)
library(pROC)
# Crear pliegues estratificados
k <- 10
folds <- cut(seq(1, nrow(train)), breaks = k, labels = FALSE)
folds <- sample(folds)  # aleatorizar
# Guardar resultados por fold
metricas_cv <- data.frame()
for (i in 1:k) {
cat("Fold", i, "\n")
idx_valid <- which(folds == i)
train_fold <- train[-idx_valid, ]
valid_fold <- train[idx_valid, ]
# Entrenar LDA
modelo_fold <- lda(Subscription ~ Age + Contact + Last.Contact.Duration + Poutcome +
Education + Campaign + Previous,
data = train_fold)
# Predecir en validación
prob_valid <- predict(modelo_fold, newdata = valid_fold)$posterior[,2]
pred_valid <- ifelse(prob_valid > 0.30, 1, 0)
y_true <- as.numeric(as.character(valid_fold$Subscription))
# Calcular métricas
TP <- sum(y_true == 1 & pred_valid == 1)
TN <- sum(y_true == 0 & pred_valid == 0)
FP <- sum(y_true == 0 & pred_valid == 1)
FN <- sum(y_true == 1 & pred_valid == 0)
accuracy <- (TP + TN) / length(y_true)
precision <- ifelse((TP + FP) == 0, 0, TP / (TP + FP))
recall <- ifelse((TP + FN) == 0, 0, TP / (TP + FN))
f1 <- ifelse((precision + recall) == 0, 0, 2 * precision * recall / (precision + recall))
specificity <- ifelse((TN + FP) == 0, 0, TN / (TN + FP))
auc <- roc(y_true, prob_valid)$auc
metricas_cv <- rbind(metricas_cv, data.frame(Fold = i,
AUC = round(auc, 4),
Accuracy = round(accuracy, 4),
F1 = round(f1, 4),
Sensibilidad = round(recall, 4),
Especificidad = round(specificity, 4)))
}
# Resultado final
cat("\n==== Promedios de Validación Cruzada ====\n")
print(round(colMeans(metricas_cv[,-1]), 4))
# ==== Generar Submission final con umbral 0.30 ====
# Predicción probabilística con modelo final
prob_7b <- predict(modelo_7b, newdata = test_final, type = "response")
# ================================
# Modelo 7b: Regresión logística con interacciones
# ================================
modelo_7b <- glm(
Subscription ~ Age + Education + Job + Marital.Status +
Credit + Housing.Loan + Personal.Loan + Contact +
Last.Contact.Month + Last.Contact.Day + Last.Contact.Duration +
Campaign + Pdays + Previous + Poutcome +
Education:Contact + Job:Poutcome + Age:Last.Contact.Duration +
Credit:Personal.Loan + Education:Campaign,
data = train,
family = "binomial"
)
# Asegurarse de que test tenga solo las variables requeridas
vars_7b <- all.vars(formula(modelo_7b))
vars_7b <- setdiff(vars_7b, "Subscription")
test_final <- test[, vars_7b, drop = FALSE]
# ==== Predicción y Submission ====
prob_7b <- predict(modelo_7b, newdata = test_final, type = "response")
pred_binarias_7b <- ifelse(prob_7b >= 0.30, 1, 0)
submission <- data.frame(
Id = test$Id,
Predicted = pred_binarias_7b
)
# ================================
# Modelo 7b: Regresión logística con interacciones
# ================================
modelo_7b <- glm(
Subscription ~ Age + Education + Job + Marital.Status +
Credit + Housing.Loan + Personal.Loan + Contact +
Last.Contact.Month + Last.Contact.Day + Last.Contact.Duration +
Campaign + Pdays + Previous + Poutcome +
Education:Contact + Job:Poutcome + Age:Last.Contact.Duration +
Credit:Personal.Loan + Education:Campaign,
data = train,
family = "binomial"
)
# Asegurarse de que test tenga solo las variables requeridas
vars_7b <- all.vars(formula(modelo_7b))
vars_7b <- setdiff(vars_7b, "Subscription")
test_final <- test[, vars_7b, drop = FALSE]
# ==== Predicción y Submission ====
prob_7b <- predict(modelo_7b, newdata = test_final, type = "response")
pred_binarias_7b <- ifelse(prob_7b >= 0.30, 1, 0)
submission <- data.frame(
Id = test$ID,
Predicted = pred_binarias_7b
)
write.table(
submission,
file = "submission_7b_umbral_030.csv",
sep = ",",
row.names = FALSE,
col.names = TRUE,
quote = FALSE
)
